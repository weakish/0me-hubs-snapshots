{
	"next_post_id": 6,
	"next_comment_id": 21,
	"avatar": "generate",
	"user_name": "frog",
	"hub": "1GrEenUGRWnzaNZjR3XsQa6dQgdPDTyt7i",
	"intro": "Hi, I've switched to Green Hub, http://127.0.0.1:43110/me.zeronetwork.bit/?Profile/1GrEenUGRWnzaNZjR3XsQa6dQgdPDTyt7i/1D9PFKqnik1Z4JtDZnYhyQERZAu5ZiXqFX",
	"post": [
		{
			"post_id": 1,
			"date_added": 1479030788,
			"body": "Hello ZeroMe!"
		},
		{
			"post_id": 1479640431,
			"body": "Whoever invented QR code, I'd say fuck you, period. What's the point of encrypting some text simple as an url into such a human-unreadable thing, when you could have just read it with your own eyes? Even Morse code is better than this!",
			"date_added": 1479640429
		},
		{
			"post_id": 1479909586,
			"body": "wow, lots of posts recently, I have a feeling that this is going to be something big.",
			"date_added": 1479909583
		},
		{
			"post_id": 1479923346,
			"body": "I've connected to many hubs, like green, red, blue, kaffie, orange, and got many \"Hello Zerome\" messages. When I click my user name through those hello messages, I can see different versions of profile pages. Clearly data on those hubs is not synced. So the question is, how do I tell which hub THIS message will be posted on? ",
			"date_added": 1479923342
		},
		{
			"post_id": 1479954419,
			"body": "Here is a list of the number of users on each hub:\n1oranGeS2xsKZ4jVsu9SVttzgkYXu4k9v/data/users\t119\n12h51ug6CcntU2aiBjhP8Ns2e5VypbWWtv/data/users\t306\n1RedkCkVaXuVXrqCMpoXQS29bwaqsuFdL/data/users\t627\n1BLueGvui1GdbtsjcKqCf4F67uKfritG49/data/users\t1211\n1GrEenUGRWnzaNZjR3XsQa6dQgdPDTyt7i/data/users\t1745\n",
			"date_added": 1479954414
		}
	],
	"post_like": {},
	"comment": [
		{
			"comment_id": 1,
			"body": "@Eibriel: Thank you!",
			"post_uri": "1D9PFKqnik1Z4JtDZnYhyQERZAu5ZiXqFX_1",
			"date_added": 1479912606
		},
		{
			"comment_id": 2,
			"body": "@Durand: I suggest leave it to be what it is, just use plain text, and machine wouldn't have a problem with that (OCR).",
			"post_uri": "1D9PFKqnik1Z4JtDZnYhyQERZAu5ZiXqFX_1479640431",
			"date_added": 1479913431
		},
		{
			"comment_id": 3,
			"body": "@Great Sick: sick.bt? doesn't make any sense to me.",
			"post_uri": "1D9PFKqnik1Z4JtDZnYhyQERZAu5ZiXqFX_1479640431",
			"date_added": 1479921225
		},
		{
			"comment_id": 4,
			"body": "@Great Sick: oh, that's pretty easy to do on a computer. 1) xclip -se c -o | sed 's/#/█/g'; scrot foo.png;  2) then I use gimp to corp the image, invert the color, and export it as foo.png . 3) finally I used https://online-barcode-reader.inliteresearch.com/ to decode it.",
			"post_uri": "1D9PFKqnik1Z4JtDZnYhyQERZAu5ZiXqFX_1479640431",
			"date_added": 1479921908
		},
		{
			"comment_id": 5,
			"body": "@Great Sick: you're welcome.",
			"post_uri": "1D9PFKqnik1Z4JtDZnYhyQERZAu5ZiXqFX_1479640431",
			"date_added": 1479922028
		},
		{
			"comment_id": 6,
			"body": "@Zanity: Thank you. Do you know how to switch hubs?",
			"post_uri": "1D9PFKqnik1Z4JtDZnYhyQERZAu5ZiXqFX_1479923346",
			"date_added": 1479953044
		},
		{
			"comment_id": 7,
			"body": "@Zanity: Oh, I got it. here is a great tutorial, http://127.0.0.1:43110/blog.kaffie.bit/?Post:25:How+to+change+your+ZeroMe+Hub",
			"post_uri": "1D9PFKqnik1Z4JtDZnYhyQERZAu5ZiXqFX_1479923346",
			"date_added": 1479953687
		},
		{
			"comment_id": 8,
			"body": "for me, this will suffice: \n\n\tif (starts_with(path, home, pathsz, homesz)\n\t    || check_with(path, home, pathsz, homesz)) {\n\t\trecreate(path, home);\n\t\treturn homesz;\n\t}\n\treturn 0;\n\nparticulary, for function definitions:\n\n\tvoid\n\tfunc(int param1, ....\n\t{\n\t}\n\none benifit of it is that function names are easier to grep.",
			"post_uri": "1GnJD7CXskmG8GywMbTvbP12wneCFW9XzR_1480684461",
			"date_added": 1480768086
		},
		{
			"comment_id": 9,
			"body": "I disagree. sure you can put any byte into a string constant in c, including unicode characters, it just doesn't care about encodings. as far as c concerned, there is no such a thing as a string, and string constant is nothing but a handy way for putting a stream of bytes, and you need a special byte to mark the end of the stream.",
			"post_uri": "1GnJD7CXskmG8GywMbTvbP12wneCFW9XzR_1481203573",
			"date_added": 1481369781
		},
		{
			"comment_id": 10,
			"body": "@weakish: well, it's general enough to put strings with any encoding. and as I said, it's just a handy way to put some bytes, if it's not human-readable, then it make no sense to embed it directly into the program.",
			"post_uri": "1GnJD7CXskmG8GywMbTvbP12wneCFW9XzR_1481203573",
			"date_added": 1481370910
		},
		{
			"comment_id": 11,
			"body": "@weakish: ok, let me clarify this a little bit, the double quote notation, a la string constant is a way to put some *text* into the code, and that's all it was meant to be used for, and it works fine. encoding is more about algorithms which has nothing to do with storage. As for `String`, I think you're comparing it to `String`s in object-oriented languages, and yes c doesn't have `String`, and it doesn't have to.",
			"post_uri": "1GnJD7CXskmG8GywMbTvbP12wneCFW9XzR_1481203573",
			"date_added": 1481374529
		},
		{
			"comment_id": 12,
			"body": "@weakish:\n>and C uses char *\nso?\n>C is a hacky language. For example, string in C. If you think string in C is an >array of characters, then you cannot put some characters in string (such as >Unicode character)\nyes you can, and if you mean to operate on unicode characters rather than just storing them, I think there must be libraries for that.\n>and you can put some noncharacters into string.\nwhy woud you want to do that? string is meant to be human-readable. you can still operate on any bits of the string the way you want though.\n> If you think string is an an array of bytes, like a buffer, then you cannot put the byte \\0 into string.\nnow you mean string literals, right? again, string literals are meant to be human-readable, and they are immutable, which does not quite fit  your descriptions of the `String` concept . if you use the syntax `char str[] = \"...\"`, then you can use `str` as an array (and truely it is). In my opinion, it's more flexible than treating `String` as an object as in other languages.",
			"post_uri": "1GnJD7CXskmG8GywMbTvbP12wneCFW9XzR_1481203573",
			"date_added": 1481384405
		},
		{
			"comment_id": 13,
			"body": "@weakish: \n>Just storing does not make much sense.\n>With proper encoding, I can store image and audio in char *.\nlibraries enable you to do that, or you may roll your own.\n>No. I mean literally byte, or buffer.\n>For example data passed to and by sockets.\nthe c language does not prohibit you from putting '\\0' into buffers.\nit's  just a convention which most c programmers agree upon that to treat \\0 as the end of a string.  you absolutely can make up a string without the trailling zero, but you have to make adjustments on the string when it comes to calling library functions, as most library writters follow that convention.\n>But C's type system does not enforce it.\nc doesn't have to, who knows if  someone might find this \"feature\" useful. I guess that's the way the language was designed, enables you to do more than you could think of, even to shoot yourself in the foot.",
			"post_uri": "1GnJD7CXskmG8GywMbTvbP12wneCFW9XzR_1481203573",
			"date_added": 1481548400
		},
		{
			"comment_id": 14,
			"body": "python zeronet.py --fileserver_port $(random_port)，至于random_port，见：https://www.commandlinefu.com/commands/view/7299/find-an-unused-unprivileged-tcp-port",
			"post_uri": "1EuzC8fvqWjEbUF5XbSYaZye1BqV29Fe6y_1482234293",
			"date_added": 1482235517
		},
		{
			"comment_id": 15,
			"body": "@一二三木头人: 是启动zeronet的时候生成一个随机的没有被占用的端口，通过参数传给zeronet.py",
			"post_uri": "1EuzC8fvqWjEbUF5XbSYaZye1BqV29Fe6y_1482234293",
			"date_added": 1482236194
		},
		{
			"comment_id": 16,
			"body": "试试这个，\n        #!/bin/bash\n        \n        read lower upper </proc/sys/net/ipv4/ip_local_port_range\n        while :; do\n\t        p=$(($lower + $RANDOM))\n        \t[ $p -gt $upper ] && continue\n\t        nc -z localhost \"$p\" || break\n        done\n        python zeronet.py --fileserver_port \"$p\"\n\n貌似可行，nc是netcat，需要bash来生成随机数",
			"post_uri": "1EuzC8fvqWjEbUF5XbSYaZye1BqV29Fe6y_1482234293",
			"date_added": 1482236868
		},
		{
			"comment_id": 17,
			"body": "@Lmath: 可以考虑装个cygwin",
			"post_uri": "1EuzC8fvqWjEbUF5XbSYaZye1BqV29Fe6y_1482234293",
			"date_added": 1482237023
		},
		{
			"comment_id": 18,
			"body": "@Lmath: 的确可以",
			"post_uri": "1EuzC8fvqWjEbUF5XbSYaZye1BqV29Fe6y_1482234293",
			"date_added": 1482237105
		},
		{
			"comment_id": 19,
			"body": "试试这个，保存成runzn.py，\n\n    import socket\n    import os\n    from random import randint\n        \n    try: \n        while 1:\n            port = randint(32768, 61000)\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            result = s.connect_ex((\"localhost\", port))\n            if result != 0:\n                s.close()\n                os.system(\"python zeronet.py --fileserver-port {}\".format(port))\n                break\n            s.close()\n    except KeyboardInterrupt:\n        sys.exit()\n",
			"post_uri": "1EuzC8fvqWjEbUF5XbSYaZye1BqV29Fe6y_1482234293",
			"date_added": 1482238135
		},
		{
			"comment_id": 20,
			"body": "@一二三木头人: 保存完了，试试看能不能连接上，我不知道windows下是如何使用zeronet的，python是否在PATH里？不是的话需要把里面`os.system`那行的python改成正确的路径",
			"post_uri": "1EuzC8fvqWjEbUF5XbSYaZye1BqV29Fe6y_1482234293",
			"date_added": 1482238679
		}
	]
}